{"version":3,"sources":["components/Header.js","components/Button.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/ErrorBoundary.js","containers/App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Header","nextProps","nextState","className","Component","Button","index","onClicked","type","onClick","Card","props","url","name","category","alt","src","CardList","foods","cardComponent","map","food","i","key","SearchBox","searchfield","searchChange","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","errormsg","infomsg","error","info","this","setState","App","onRequestFoods","random","Math","floor","length","onSearchChange","isPending","filteredFoods","filter","toLowerCase","includes","filterFoods","bind","connect","searchFoods","requestFoods","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialSearchState","initialFoodState","rootReducer","combineReducers","action","Object","assign","Boolean","window","location","hostname","match","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.19fc416e.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\n\nclass Header extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <header className=\"header\">\n          <h1 className=\"f1\">What Do You Want To Eat?</h1>\n        </header>\n      </Fragment>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Fragment } from \"react\";\n\nconst Button = ({ index, onClicked }) => {\n  return (\n    <Fragment>\n      <button\n        type=\"button\"\n        onClick={onClicked}\n        className=\"f3 pa3 btn btn-sucess grow\"\n      >\n        No Idea? Click Me!\n      </button>\n    </Fragment>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\n\nconst Card = (props) => {\n  const { url, name, category } = props;\n  return (\n    <div className=\"tc bg-light-green dib br5 pa3 ma3 grow bw2 shadow\">\n      <img alt=\"food\" src={url} />\n      <div>\n        <p>{category}</p>\n        <p>{name}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { Fragment } from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ foods }) => {\n  const cardComponent = foods.map((food, i) => {\n    return (\n      <Card\n        key={i}\n        url={foods[i].url}\n        name={foods[i].name}\n        category={foods[i].category}\n      />\n    );\n  });\n  return <Fragment>{cardComponent}</Fragment>;\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className=\"tc pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search foods\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = (props) => {\n  return (\n    <div\n      style={{ overflowY: \"auto\", border: \"1 px solid black\", height: \"500px\" }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass ErrorBoundary extends Component {\n  constructor() {\n    super();\n    this.state = {\n      hasError: false,\n      errormsg: \"\",\n      infomsg: \"\",\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({\n      hasError: true,\n      errormsg: error,\n      infomsg: info,\n    });\n  }\n\n  render() {\n    const { hasError, errormsg, infomsg } = this.state;\n    if (hasError) {\n      return (\n        <div>\n          <h1>Oops, somthing wrong happens...</h1>\n          <p>The error message is: {errormsg}.</p>\n          <p>The info message is {infomsg}.</p>\n        </div>\n      );\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from \"react\";\n\nimport \"./App.css\";\nimport Header from \"../components/Header\";\nimport Button from \"../components/Button\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundary from \"./ErrorBoundary\";\n\nimport { connect } from \"react-redux\";\n\nimport { setSearchField, requestFoods } from \"../actions\";\n\nconst mapStateToProps = (state) => {\n  return {\n    searchfield: state.searchFoods.searchfield,\n    foods: state.requestFoods.foods,\n    isPending: state.requestFoods.isPending,\n    error: state.requestFoods.error,\n  };\n};\n\nconst filterFoods = (index, foods, searchfield) => {\n  var filteredFoods = [];\n  if (index !== -1 && !searchfield.length) {\n    filteredFoods = [foods[index]];\n  } else if (foods.length > 0) {\n    filteredFoods = foods.filter((food) => {\n      return food.name.toLowerCase().includes(searchfield.toLowerCase());\n    });\n  }\n  return filteredFoods;\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestFoods: () => dispatch(requestFoods()),\n  };\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      index: -1,\n    };\n  }\n\n  componentDidMount() {\n    this.props.onRequestFoods();\n  }\n\n  onClicked() {\n    const random = Math.floor(Math.random() * this.props.foods.length);\n    this.setState({ index: random, searchfield: \"\" });\n  }\n\n  render() {\n    const { index } = this.state;\n    const { foods, searchfield, onSearchChange, isPending } = this.props;\n    var filteredFoods = filterFoods(index, foods, searchfield);\n\n    return isPending ? (\n      <div className=\"App\">\n        <header className=\"header\">\n          <h1 className=\"f1\">Loading...</h1>\n        </header>\n      </div>\n    ) : (\n      <div className=\"App\">\n        <Header />\n        <div className=\"tc\">\n          <SearchBox searchChange={onSearchChange} />\n          <Button onClicked={this.onClicked.bind(this)} />\n          <Scroll>\n            <ErrorBoundary>\n              <CardList foods={filteredFoods} />\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_FOODS_PENDING,\n  REQUEST_FOODS_SUCCESS,\n  REQUEST_FOODS_FAILED,\n} from \"./constants\";\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestFoods = () => (dispatch) => {\n  dispatch({ type: REQUEST_FOODS_PENDING });\n  fetch(\n    \"https://my-json-server.typicode.com/haochunchang/food-json-server/posts\"\n  )\n    .then((response) => response.json())\n    .then((data) => {\n      for (var index = 0; index < data.length; index++) {\n        var name = data[index].name.toLowerCase();\n        data[\n          index\n        ].url = `https://github.com/haochunchang/food-json-server/blob/master/images/${name}.jpg?raw=true`;\n      }\n      dispatch({ type: REQUEST_FOODS_SUCCESS, payload: data });\n    })\n    .catch((error) => dispatch({ type: REQUEST_FOODS_FAILED, payload: error }));\n};\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\nexport const REQUEST_FOODS_PENDING = \"REQUEST_FOODS_PENDING\";\nexport const REQUEST_FOODS_SUCCESS = \"REQUEST_FOODS_SUCCESS\";\nexport const REQUEST_FOODS_FAILED = \"REQUEST_FOODS_FAILED\";\n","import { combineReducers } from \"redux\";\nimport {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_FOODS_PENDING,\n  REQUEST_FOODS_SUCCESS,\n  REQUEST_FOODS_FAILED,\n} from \"./constants\";\n\n// Many Reducers below\n//\n//\nconst initialSearchState = {\n  searchfield: \"\",\n};\n\nexport const searchFoods = (state = initialSearchState, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchfield: action.payload });\n    // or {...state, searchfield: action.payload}\n    default:\n      return state;\n  }\n};\n\nconst initialFoodState = {\n  isPending: false,\n  foods: [],\n  error: \"\",\n};\n\nexport const requestFoods = (state = initialFoodState, action = {}) => {\n  switch (action.type) {\n    case REQUEST_FOODS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_FOODS_SUCCESS:\n      return Object.assign({}, state, {\n        foods: action.payload,\n        isPending: false,\n      });\n    case REQUEST_FOODS_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false,\n      });\n    default:\n      return state;\n  }\n};\n\nexport const rootReducer = combineReducers({\n  searchFoods,\n  requestFoods,\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"./wdyr\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport \"./index.css\";\n\nimport App from \"./containers/App\";\nimport { rootReducer } from \"./reducers\";\nimport \"tachyons\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst logger = createLogger();\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}