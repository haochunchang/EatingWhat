{"version":3,"sources":["actions.js","constants.js","api/api.js","components/Scroll.tsx","containers/ErrorBoundary.js","components/FoodButton.js","components/SearchButton.js","components/Card.tsx","components/CardList.tsx","components/App.tsx","reducers.js","serviceWorker.js","index.tsx"],"names":["requestFoods","foodURL","dispatch","type","url","fetch","then","response","json","data","payload","catch","error","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","errormsg","infomsg","info","this","setState","Component","FoodButton","id","onClicked","FoodName","onClick","className","SearchButton","isDecided","Card","name","href","target","rel","alt","src","CardList","cardComponent","foods","map","food","i","key","App","typedUseSelector","useSelector","isPending","useDispatch","useEffect","starchyFoods","filter","item","category","proteinFoods","filterFoods","useState","starch","setStarch","protein","setProtein","setIsDecided","length","s","p","window","open","index","Math","floor","random","initialFoodState","rootReducer","combineReducers","action","Object","assign","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a08f207b.chunk.js","sourcesContent":["import {\n  REQUEST_FOODS_PENDING,\n  REQUEST_FOODS_SUCCESS,\n  REQUEST_FOODS_FAILED,\n} from \"./constants\";\n\nimport { fetchFood } from \"./api/api\";\n\nexport const requestFoods = (foodURL) => (dispatch) => {\n  dispatch({ type: REQUEST_FOODS_PENDING });\n  return fetchFood(foodURL)\n    .then((data) => {\n      dispatch({\n        type: REQUEST_FOODS_SUCCESS,\n        payload: data,\n      });\n    })\n    .catch((error) =>\n      dispatch({\n        type: REQUEST_FOODS_FAILED,\n        payload: error,\n      })\n    );\n};\n","export const REQUEST_FOODS_PENDING = \"REQUEST_FOODS_PENDING\";\nexport const REQUEST_FOODS_SUCCESS = \"REQUEST_FOODS_SUCCESS\";\nexport const REQUEST_FOODS_FAILED = \"REQUEST_FOODS_FAILED\";\n","export const FOOD_GITHUB_URL =\n  \"https://my-json-server.typicode.com/haochunchang/food-json-server/posts\";\n\nexport const fetchFood = (url) => {\n  return fetch(url).then((response) => response.json());\n};\n","import React from \"react\";\n\ninterface Props {\n  children?: JSX.Element;\n}\n\nconst Scroll = (props: Props) => {\n  return (\n    <div\n      style={{ overflowY: \"auto\", border: \"1 px solid black\", height: \"500px\" }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\nimport \"../components/App.css\";\n\nclass ErrorBoundary extends Component {\n  constructor() {\n    super();\n    this.state = {\n      hasError: false,\n      errormsg: \"\",\n      infomsg: \"\",\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({\n      hasError: true,\n      errormsg: error,\n      infomsg: info,\n    });\n  }\n\n  render() {\n    const { hasError, errormsg, infomsg } = this.state;\n    if (hasError) {\n      return (\n        <div>\n          <h1>Oops, somthing wrong happens...</h1>\n          <p>The error message is: {errormsg}.</p>\n          <p>The info message is {infomsg}.</p>\n        </div>\n      );\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Fragment } from \"react\";\n\nconst FoodButton = ({ id, onClicked, FoodName }) => (\n  <Fragment>\n    <button\n      id={id}\n      type=\"button\"\n      onClick={onClicked}\n      className=\"f3 pa3 btn btn-sucess grow\"\n    >\n      {`${FoodName}?`}\n    </button>\n  </Fragment>\n);\n\nexport default FoodButton;\n","import React, { Fragment } from \"react\";\n\nconst SearchButton = ({ id, isDecided, onClicked }) => {\n  return isDecided ? (\n    <Fragment>\n      <button\n        id={id}\n        type=\"button\"\n        className=\"f3 pa3 btn btn-success grow\"\n        onClick={onClicked}\n      >\n        Search Nearby Foods\n      </button>\n    </Fragment>\n  ) : (\n    <h2>Not yet decide what to eat? Click buttons to decide!</h2>\n  );\n};\n\nexport default SearchButton;\n","import React from \"react\";\n\ninterface CardStatelessProps {\n  url: string;\n  name: string;\n}\n\nconst Card: React.FunctionComponent<CardStatelessProps> = ({ url, name }) => {\n  return (\n    <div className=\"tc dib br5 pa3 ma3 grow bw2 shadow\">\n      <a\n        href={`https://www.google.com.tw/maps/search/${name}/`}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <img alt={name} src={url} />\n      </a>\n      <div>\n        <h3>{name}</h3>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { Fragment } from \"react\";\nimport Card from \"./Card\";\nimport { Food } from \"./App\";\n\nconst CardList = ({ foods }: { foods: Array<Food> }) => {\n  const cardComponent = foods.map((food, i) => {\n    return <Card key={i} url={food.url} name={food.name} />;\n  });\n\n  return <Fragment>{cardComponent}</Fragment>;\n};\n\nexport default CardList;\n","import React, { useEffect, useState } from \"react\";\nimport { TypedUseSelectorHook, useSelector, useDispatch } from \"react-redux\";\n\nimport \"./App.css\";\n\nimport { requestFoods } from \"../actions\";\nimport { FOOD_GITHUB_URL } from \"../api/api\";\n\nimport Scroll from \"./Scroll\";\nimport ErrorBoundary from \"../containers/ErrorBoundary\";\nimport FoodButton from \"./FoodButton\";\nimport SearchButton from \"./SearchButton\";\nimport CardList from \"./CardList\";\n\nexport interface Food {\n  id: number;\n  name: string;\n  category: string;\n  url: string;\n}\n\nexport interface AppState {\n  requestFoods: {\n    foods: Array<Food>;\n    isPending: boolean;\n    error: string;\n  };\n}\n\nexport function filterFoods(foods: Array<Food>) {\n  return {\n    starchyFoods: foods.filter((item) => item.category === \"main food\"),\n    proteinFoods: foods.filter((item) => item.category === \"meat\"),\n  };\n}\n\nexport default function App(): JSX.Element {\n  const typedUseSelector: TypedUseSelectorHook<AppState> = useSelector;\n  const isPending = typedUseSelector((state) => state.requestFoods.isPending);\n  const foods = typedUseSelector((state) => state.requestFoods.foods);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(requestFoods(FOOD_GITHUB_URL));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const { starchyFoods, proteinFoods } = filterFoods(foods);\n  const [starch, setStarch] = useState(starchyFoods);\n  const [protein, setProtein] = useState(proteinFoods);\n  const [isDecided, setIsDecided] = useState(false);\n\n  useEffect(() => {\n    setStarch(starchyFoods);\n    setProtein(proteinFoods);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [foods]);\n\n  useEffect(() => {\n    if (starch.length === 1 && protein.length === 1) {\n      setIsDecided(true);\n    }\n  }, [starch.length, protein.length]);\n\n  const onClickChangeStarch = (): void => {\n    const index = Math.floor(Math.random() * starchyFoods.length);\n    setStarch([starchyFoods[index]]);\n  };\n\n  const onClickChangeProtein = (): void => {\n    const index = Math.floor(Math.random() * proteinFoods.length);\n    setProtein([proteinFoods[index]]);\n  };\n\n  const onClickedSearch = (): void => {\n    const s = starch[0].name;\n    const p = protein[0].name;\n    window.open(`https://www.google.com.tw/maps/search/${p}+${s}/`);\n  };\n\n  return isPending ? (\n    <div className=\"App\">\n      <header className=\"header\">\n        <h1 className=\"f1\">Loading...</h1>\n      </header>\n    </div>\n  ) : (\n    <div className=\"App\">\n      <header className=\"header\">\n        <h1 className=\"f1\">Eating What?</h1>\n      </header>\n      <section>\n        <SearchButton\n          id=\"combined-search-button\"\n          isDecided={isDecided}\n          onClicked={onClickedSearch}\n        />\n      </section>\n      <section>\n        <div className=\"row\">\n          <div className=\"column\">\n            <FoodButton\n              id=\"starch-button\"\n              onClicked={onClickChangeStarch}\n              FoodName={\"Starchy Food\"}\n            />\n            <Scroll>\n              <ErrorBoundary>\n                <CardList foods={starch} />\n              </ErrorBoundary>\n            </Scroll>\n          </div>\n\n          <div className=\"column\">\n            <FoodButton\n              id=\"protein-button\"\n              onClicked={onClickChangeProtein}\n              FoodName={\"Protein Food\"}\n            />\n            <Scroll>\n              <ErrorBoundary>\n                <CardList foods={protein} />\n              </ErrorBoundary>\n            </Scroll>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","import { combineReducers } from \"redux\";\nimport {\n  REQUEST_FOODS_PENDING,\n  REQUEST_FOODS_SUCCESS,\n  REQUEST_FOODS_FAILED,\n} from \"./constants\";\n\nconst initialFoodState = {\n  isPending: false,\n  foods: [],\n  error: \"\",\n};\n\nexport const requestFoods = (state = initialFoodState, action = {}) => {\n  switch (action.type) {\n    case REQUEST_FOODS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_FOODS_SUCCESS:\n      return Object.assign({}, state, {\n        foods: action.payload,\n        isPending: false,\n      });\n    case REQUEST_FOODS_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false,\n      });\n    default:\n      return state;\n  }\n};\n\nexport const rootReducer = combineReducers({\n  requestFoods,\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"./wdyr\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport \"./index.css\";\n\nimport App from \"./components/App\";\nimport { rootReducer } from \"./reducers\";\nimport \"tachyons\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst logger = createLogger();\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\") as HTMLElement\n);\n\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}